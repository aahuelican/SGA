/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package sga.web.action;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import sga.eis.dto.Persona;
import sga.eis.dto.Usuario;
import sga.services.PersonaService;
import sga.services.UsuarioService;
import sga.services.impl.PersonaServiceImpl;
import sga.services.impl.UsuarioServiceImpl;
import sga.web.form.LoginForm;

/** 
 * MyEclipse Struts
 * Creation date: 07-14-2010
 * 
 * XDoclet definition:
 * @struts.action path="/login" name="loginForm" input="login.page" scope="request" validate="true"
 * @struts.action-forward name="valido" path="listado.page"
 */
public class LoginAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		LoginForm loginForm = (LoginForm) form;// TODO Auto-generated method stub
		
		//Validamos si el usuario proporcionado es correcto
		//ya estamos seguros de que los valores no son nulos

	    //Creamos el objeto DTO a enviar a la capa de servicio
	    Usuario usuarioDto = new Usuario();
	    usuarioDto.setUsername( loginForm.getUsuario() );
	    usuarioDto.setPassword( loginForm.getPassword() );

	    //Revisamos si existen el usuario y el password en la BD
	    //Utilizamos el servicio de Usuarios
	    UsuarioService usuarioService = UsuarioServiceImpl.getInstance();
	    boolean usuarioValido = usuarioService.usuarioExistente(usuarioDto);

	    //Si el usuario es valido, lo redireccionamos al caso de listarPersonas
	    if (usuarioValido) {
	    	//Agregamos el usuario a la session
		      HttpSession session = request.getSession();
		      session.setAttribute("usuario", usuarioDto.getUsername());

		      //Recuperamos el listado de personas, utilizamos el servicio de Personas
		      PersonaService personaService = PersonaServiceImpl.getInstance();
		      List<Persona> personas = personaService.getAllPersonas();

		      //Si se encontraron personas, las compartimos en la pagina Web
		      if (personas != null && personas.size() > 0) {
		        request.setAttribute("personas", personas);
		      }
		      return mapping.findForward("listarPersonas");
	    }
	    else {
	      //si el usuario no es valido, lo mandamos a la pagina de login nuevamente
	      request.setAttribute("mensaje", "El usuario o password son incorrectos");
	      return mapping.findForward("login");
	    }
	}
	
}